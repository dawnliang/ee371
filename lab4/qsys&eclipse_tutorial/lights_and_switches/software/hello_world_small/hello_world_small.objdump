
hello_world_small.elf:     file format elf32-littlenios2
hello_world_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000314 memsz 0x00000314 flags r-x
    LOAD off    0x00001334 vaddr 0x00002334 paddr 0x000023a4 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001414 vaddr 0x00002414 paddr 0x00002414 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  000013a4  2**0
                  CONTENTS
  2 .text         000002f0  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00002310  00002310  00001310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00002334  000023a4  00001334  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00002414  00002414  00001414  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00002420  00002420  000013a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000013c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000147e  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000094f  00000000  00000000  00002a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000009c3  00000000  00000000  0000335d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001fc  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007d3  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001ee  00000000  00000000  000046ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000048e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  000048f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000586e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00005871  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005881  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005882  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000588b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005894  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  0000589d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000016  00000000  00000000  000058a2  2**0
                  CONTENTS, READONLY
 26 .jdi          000040da  00000000  00000000  000058b8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00035011  00000000  00000000  00009992  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
00002310 l    d  .rodata	00000000 .rodata
00002334 l    d  .rwdata	00000000 .rwdata
00002414 l    d  .bss	00000000 .bss
00002420 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_small_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000022e0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000021c4 g     F .text	0000002c alt_main
000023a4 g       *ABS*	00000000 __flash_rwdata_start
000021f0 g     F .text	00000038 alt_putstr
0000238c g     O .rwdata	00000004 jtag_uart
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002418 g     O .bss	00000004 alt_argv
0000a38c g       *ABS*	00000000 _gp
00002334 g     O .rwdata	00000030 alt_fd_list
0000224c g     F .text	0000005c altera_avalon_jtag_uart_read
00002390 g     O .rwdata	00000004 alt_max_fd
00002420 g       *ABS*	00000000 __bss_end
000020a0 g     F .text	00000044 alt_getchar
00002364 g     O .rwdata	00000028 alt_dev_null
000022dc g     F .text	00000004 alt_dcache_flush_all
000023a4 g       *ABS*	00000000 __ram_rwdata_end
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory
00002394 g     O .rwdata	00000008 alt_dev_list
00002334 g       *ABS*	00000000 __ram_rodata_end
00002420 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000022a8 g     F .text	00000034 altera_avalon_jtag_uart_write
00002020 g     F .text	0000003c _start
00002248 g     F .text	00000004 alt_sys_init
00002334 g       *ABS*	00000000 __ram_rwdata_start
00002310 g       *ABS*	00000000 __ram_rodata_start
00002420 g       *ABS*	00000000 __alt_stack_base
00002414 g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000044 main
00002414 g     O .bss	00000004 alt_envp
00002310 g       *ABS*	00000000 __flash_rodata_start
00002228 g     F .text	00000020 alt_irq_init
0000241c g     O .bss	00000004 alt_argc
0000239c g     O .rwdata	00000008 alt_fs_list
00002020 g       *ABS*	00000000 __ram_exceptions_start
000023a4 g       *ABS*	00000000 _edata
00002420 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000022ec g     F .text	00000008 altera_nios2_qsys_irq_init
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
000022f4 g     F .text	0000001c strlen
000022e8 g     F .text	00000004 alt_icache_flush_all
000020e4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a8e314 	ori	gp,gp,41868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10890514 	ori	r2,r2,9236

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c90814 	ori	r3,r3,9248

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff7cb8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00020e40 	call	20e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021c40 	call	21c4 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff7ccc>

0000205c <main>:
#define switches (volatile char *) 0x0005010
#define leds (volatile char *) 0x0005000

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    205c:	01000034 	movhi	r4,0
#include "sys/alt_stdio.h"
#define switches (volatile char *) 0x0005010
#define leds (volatile char *) 0x0005000

int main()
{ 
    2060:	defffe04 	addi	sp,sp,-8
  alt_putstr("Hello from Nios II!\n");
    2064:	2108c404 	addi	r4,r4,8976
#include "sys/alt_stdio.h"
#define switches (volatile char *) 0x0005010
#define leds (volatile char *) 0x0005000

int main()
{ 
    2068:	dc000015 	stw	r16,0(sp)
    206c:	dfc00115 	stw	ra,4(sp)
  alt_putstr("Hello from Nios II!\n");
  char input = 'a';
  while(input != 'G') input = alt_getchar();
    2070:	040011c4 	movi	r16,71
#define switches (volatile char *) 0x0005010
#define leds (volatile char *) 0x0005000

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    2074:	00021f00 	call	21f0 <alt_putstr>
  char input = 'a';
  while(input != 'G') input = alt_getchar();
    2078:	00020a00 	call	20a0 <alt_getchar>
    207c:	10803fcc 	andi	r2,r2,255
    2080:	1080201c 	xori	r2,r2,128
    2084:	10bfe004 	addi	r2,r2,-128
    2088:	143ffb1e 	bne	r2,r16,2078 <_gp+0xffff7cec>

  while (1) {
	  *leds = *switches;
    208c:	01140404 	movi	r4,20496
    2090:	00940004 	movi	r2,20480
    2094:	20c00003 	ldbu	r3,0(r4)
    2098:	10c00005 	stb	r3,0(r2)
    209c:	003ffd06 	br	2094 <_gp+0xffff7d08>

000020a0 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    20a0:	00800034 	movhi	r2,0
    20a4:	1088cd04 	addi	r2,r2,9012
    20a8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    20ac:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    20b0:	01000034 	movhi	r4,0
    20b4:	01800044 	movi	r6,1
    20b8:	d80b883a 	mov	r5,sp
    20bc:	2108e304 	addi	r4,r4,9100
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    20c0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    20c4:	000224c0 	call	224c <altera_avalon_jtag_uart_read>
    20c8:	0080020e 	bge	zero,r2,20d4 <alt_getchar+0x34>
        return -1;
    }
    return c;
    20cc:	d8800007 	ldb	r2,0(sp)
    20d0:	00000106 	br	20d8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    20d4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    20d8:	dfc00117 	ldw	ra,4(sp)
    20dc:	dec00204 	addi	sp,sp,8
    20e0:	f800283a 	ret

000020e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    20e4:	deffff04 	addi	sp,sp,-4
    20e8:	01000034 	movhi	r4,0
    20ec:	01400034 	movhi	r5,0
    20f0:	dfc00015 	stw	ra,0(sp)
    20f4:	2108cd04 	addi	r4,r4,9012
    20f8:	2948e904 	addi	r5,r5,9124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    20fc:	2140061e 	bne	r4,r5,2118 <alt_load+0x34>
    2100:	01000034 	movhi	r4,0
    2104:	01400034 	movhi	r5,0
    2108:	21080804 	addi	r4,r4,8224
    210c:	29480804 	addi	r5,r5,8224
    2110:	2140121e 	bne	r4,r5,215c <alt_load+0x78>
    2114:	00000b06 	br	2144 <alt_load+0x60>
    2118:	00c00034 	movhi	r3,0
    211c:	18c8e904 	addi	r3,r3,9124
    2120:	1907c83a 	sub	r3,r3,r4
    2124:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2128:	10fff526 	beq	r2,r3,2100 <_gp+0xffff7d74>
    {
      *to++ = *from++;
    212c:	114f883a 	add	r7,r2,r5
    2130:	39c00017 	ldw	r7,0(r7)
    2134:	110d883a 	add	r6,r2,r4
    2138:	10800104 	addi	r2,r2,4
    213c:	31c00015 	stw	r7,0(r6)
    2140:	003ff906 	br	2128 <_gp+0xffff7d9c>
    2144:	01000034 	movhi	r4,0
    2148:	01400034 	movhi	r5,0
    214c:	2108c404 	addi	r4,r4,8976
    2150:	2948c404 	addi	r5,r5,8976

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2154:	2140101e 	bne	r4,r5,2198 <alt_load+0xb4>
    2158:	00000b06 	br	2188 <alt_load+0xa4>
    215c:	00c00034 	movhi	r3,0
    2160:	18c80804 	addi	r3,r3,8224
    2164:	1907c83a 	sub	r3,r3,r4
    2168:	0005883a 	mov	r2,zero
  {
    while( to != end )
    216c:	10fff526 	beq	r2,r3,2144 <_gp+0xffff7db8>
    {
      *to++ = *from++;
    2170:	114f883a 	add	r7,r2,r5
    2174:	39c00017 	ldw	r7,0(r7)
    2178:	110d883a 	add	r6,r2,r4
    217c:	10800104 	addi	r2,r2,4
    2180:	31c00015 	stw	r7,0(r6)
    2184:	003ff906 	br	216c <_gp+0xffff7de0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2188:	00022dc0 	call	22dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    218c:	dfc00017 	ldw	ra,0(sp)
    2190:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2194:	00022e81 	jmpi	22e8 <alt_icache_flush_all>
    2198:	00c00034 	movhi	r3,0
    219c:	18c8cd04 	addi	r3,r3,9012
    21a0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    21a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    21a8:	18bff726 	beq	r3,r2,2188 <_gp+0xffff7dfc>
    {
      *to++ = *from++;
    21ac:	114f883a 	add	r7,r2,r5
    21b0:	39c00017 	ldw	r7,0(r7)
    21b4:	110d883a 	add	r6,r2,r4
    21b8:	10800104 	addi	r2,r2,4
    21bc:	31c00015 	stw	r7,0(r6)
    21c0:	003ff906 	br	21a8 <_gp+0xffff7e1c>

000021c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    21c4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    21c8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    21cc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    21d0:	00022280 	call	2228 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    21d4:	00022480 	call	2248 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21d8:	d1a02217 	ldw	r6,-32632(gp)
    21dc:	d1602317 	ldw	r5,-32628(gp)
    21e0:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    21e4:	dfc00017 	ldw	ra,0(sp)
    21e8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21ec:	000205c1 	jmpi	205c <main>

000021f0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    21f0:	defffe04 	addi	sp,sp,-8
    21f4:	dc000015 	stw	r16,0(sp)
    21f8:	dfc00115 	stw	ra,4(sp)
    21fc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2200:	00022f40 	call	22f4 <strlen>
    2204:	01000034 	movhi	r4,0
    2208:	000f883a 	mov	r7,zero
    220c:	100d883a 	mov	r6,r2
    2210:	800b883a 	mov	r5,r16
    2214:	2108e304 	addi	r4,r4,9100
#else
    return fputs(str, stdout);
#endif
#endif
}
    2218:	dfc00117 	ldw	ra,4(sp)
    221c:	dc000017 	ldw	r16,0(sp)
    2220:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2224:	00022a81 	jmpi	22a8 <altera_avalon_jtag_uart_write>

00002228 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2228:	deffff04 	addi	sp,sp,-4
    222c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    2230:	00022ec0 	call	22ec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2234:	00800044 	movi	r2,1
    2238:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    223c:	dfc00017 	ldw	ra,0(sp)
    2240:	dec00104 	addi	sp,sp,4
    2244:	f800283a 	ret

00002248 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2248:	f800283a 	ret

0000224c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    224c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    2250:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    2254:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    2258:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    225c:	11800b2e 	bgeu	r2,r6,228c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    2260:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    2264:	1a60000c 	andi	r9,r3,32768
    2268:	48000326 	beq	r9,zero,2278 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    226c:	10c00005 	stb	r3,0(r2)
    2270:	10800044 	addi	r2,r2,1
    2274:	003ff906 	br	225c <_gp+0xffff7ed0>
    else if (ptr != buffer)
    2278:	11400226 	beq	r2,r5,2284 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    227c:	1145c83a 	sub	r2,r2,r5
    2280:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    2284:	403ff526 	beq	r8,zero,225c <_gp+0xffff7ed0>
    2288:	00000106 	br	2290 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    228c:	117ffb1e 	bne	r2,r5,227c <_gp+0xffff7ef0>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    2290:	39d0000c 	andi	r7,r7,16384
    2294:	3800021e 	bne	r7,zero,22a0 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    2298:	00bffec4 	movi	r2,-5
    229c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    22a0:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    22a4:	f800283a 	ret

000022a8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    22a8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    22ac:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    22b0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    22b4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    22b8:	2980072e 	bgeu	r5,r6,22d8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    22bc:	38c00037 	ldwio	r3,0(r7)
    22c0:	18ffffec 	andhi	r3,r3,65535
    22c4:	183ffc26 	beq	r3,zero,22b8 <_gp+0xffff7f2c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    22c8:	28c00007 	ldb	r3,0(r5)
    22cc:	20c00035 	stwio	r3,0(r4)
    22d0:	29400044 	addi	r5,r5,1
    22d4:	003ff806 	br	22b8 <_gp+0xffff7f2c>

  return count;
}
    22d8:	f800283a 	ret

000022dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    22dc:	f800283a 	ret

000022e0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    22e0:	3005883a 	mov	r2,r6
    22e4:	f800283a 	ret

000022e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    22e8:	f800283a 	ret

000022ec <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    22ec:	000170fa 	wrctl	ienable,zero
    22f0:	f800283a 	ret

000022f4 <strlen>:
    22f4:	2005883a 	mov	r2,r4
    22f8:	10c00007 	ldb	r3,0(r2)
    22fc:	18000226 	beq	r3,zero,2308 <strlen+0x14>
    2300:	10800044 	addi	r2,r2,1
    2304:	003ffc06 	br	22f8 <_gp+0xffff7f6c>
    2308:	1105c83a 	sub	r2,r2,r4
    230c:	f800283a 	ret

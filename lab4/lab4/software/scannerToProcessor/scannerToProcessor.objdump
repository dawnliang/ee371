
scannerToProcessor.elf:     file format elf32-littlenios2
scannerToProcessor.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000654 memsz 0x00000654 flags r-x
    LOAD off    0x00001674 vaddr 0x00002674 paddr 0x000026e4 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001754 vaddr 0x00002754 paddr 0x00002754 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  000016e4  2**0
                  CONTENTS
  2 .text         000005ec  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  0000260c  0000260c  0000160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00002674  000026e4  00001674  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00002754  00002754  00001754  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00002760  00002760  000016e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000248  00000000  00000000  00001708  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001a60  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bf1  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000d28  00000000  00000000  00003fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002c4  00000000  00000000  00004ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000009e9  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007b7  00000000  00000000  00005979  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00006130  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00006170  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000727a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000727d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007282  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007283  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000728f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000729a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  000072a5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000007  00000000  00000000  000072aa  2**0
                  CONTENTS, READONLY
 26 .jdi          000037c6  00000000  00000000  000072b1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00077c37  00000000  00000000  0000aa77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
0000260c l    d  .rodata	00000000 .rodata
00002674 l    d  .rwdata	00000000 .rwdata
00002754 l    d  .bss	00000000 .bss
00002760 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../scannerToProcessor_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002400 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00002258 g     F .text	0000002c alt_main
000026e4 g       *ABS*	00000000 __flash_rwdata_start
00002284 g     F .text	00000038 alt_putstr
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002758 g     O .bss	00000004 alt_argv
0000a6cc g       *ABS*	00000000 _gp
000022bc g     F .text	00000004 usleep
00002674 g     O .rwdata	00000030 alt_fd_list
000022e4 g     F .text	0000005c altera_avalon_jtag_uart_read
00002528 g     F .text	00000064 .hidden __udivsi3
000026d0 g     O .rwdata	00000004 alt_max_fd
00002760 g       *ABS*	00000000 __bss_end
00002134 g     F .text	00000044 alt_getchar
00002000 g       *ABS*	00000000 __alt_mem_onchip_mem
000026a4 g     O .rwdata	00000028 alt_dev_null
000023fc g     F .text	00000004 alt_dcache_flush_all
000026e4 g       *ABS*	00000000 __ram_rwdata_end
000026d4 g     O .rwdata	00000008 alt_dev_list
00002674 g       *ABS*	00000000 __ram_rodata_end
000026cc g     O .rwdata	00000004 jtag_uart_0
0000258c g     F .text	00000058 .hidden __umodsi3
00002760 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002340 g     F .text	00000034 altera_avalon_jtag_uart_write
00002020 g     F .text	0000003c _start
000022e0 g     F .text	00000004 alt_sys_init
000025e4 g     F .text	00000028 .hidden __mulsi3
00002674 g       *ABS*	00000000 __ram_rwdata_start
0000260c g       *ABS*	00000000 __ram_rodata_start
00002374 g     F .text	00000088 alt_busy_sleep
00002760 g       *ABS*	00000000 __alt_stack_base
00002754 g       *ABS*	00000000 __bss_start
0000205c g     F .text	000000d8 main
00002754 g     O .bss	00000004 alt_envp
00002430 g     F .text	00000084 .hidden __divsi3
0000260c g       *ABS*	00000000 __flash_rodata_start
000022c0 g     F .text	00000020 alt_irq_init
0000275c g     O .bss	00000004 alt_argc
000026dc g     O .rwdata	00000008 alt_fs_list
00002020 g       *ABS*	00000000 __ram_exceptions_start
000026e4 g       *ABS*	00000000 _edata
00002760 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
0000240c g     F .text	00000008 altera_nios2_qsys_irq_init
000024b4 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002414 g     F .text	0000001c strlen
00002408 g     F .text	00000004 alt_icache_flush_all
00002178 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a9b314 	ori	gp,gp,42700
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1089d514 	ori	r2,r2,10068

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c9d814 	ori	r3,r3,10080

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff7978>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00021780 	call	2178 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00022580 	call	2258 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff798c>

0000205c <main>:
#define startScanning (volatile char *) 0x0005030
#define data_in (volatile char *) 0x0005000

int main()
{ 
  alt_putstr("SCANNER CTRL BASE I/O\n");
    205c:	01000034 	movhi	r4,0
#define xfer (volatile char *) 0x0005020
#define startScanning (volatile char *) 0x0005030
#define data_in (volatile char *) 0x0005000

int main()
{ 
    2060:	defffb04 	addi	sp,sp,-20
  alt_putstr("SCANNER CTRL BASE I/O\n");
    2064:	21098304 	addi	r4,r4,9740
#define xfer (volatile char *) 0x0005020
#define startScanning (volatile char *) 0x0005030
#define data_in (volatile char *) 0x0005000

int main()
{ 
    2068:	dc400115 	stw	r17,4(sp)
    206c:	dc000015 	stw	r16,0(sp)
    2070:	dfc00415 	stw	ra,16(sp)
    2074:	dcc00315 	stw	r19,12(sp)
    2078:	dc800215 	stw	r18,8(sp)
  char input = 'a';

  /* Event loop never exits. */
  while (1) {
	  *startScanning = 0;
	  *xfer = 0;
    207c:	04140804 	movi	r16,20512
#define startScanning (volatile char *) 0x0005030
#define data_in (volatile char *) 0x0005000

int main()
{ 
  alt_putstr("SCANNER CTRL BASE I/O\n");
    2080:	00022840 	call	2284 <alt_putstr>
		  alt_putstr("\n ready to transfer!\n");
	  }

  	  input = alt_getchar();
  	  if(input == 's') {
  		  *startScanning = 1;
    2084:	04400044 	movi	r17,1
  alt_putstr("SCANNER CTRL BASE I/O\n");
  char input = 'a';

  /* Event loop never exits. */
  while (1) {
	  *startScanning = 0;
    2088:	04d40c04 	movi	r19,20528
    208c:	98000005 	stb	zero,0(r19)
	  *xfer = 0;
    2090:	80000005 	stb	zero,0(r16)

	  alt_putstr(*readyToTransfer);
    2094:	04940404 	movi	r18,20496
    2098:	91000003 	ldbu	r4,0(r18)
    209c:	21003fcc 	andi	r4,r4,255
    20a0:	2100201c 	xori	r4,r4,128
    20a4:	213fe004 	addi	r4,r4,-128
    20a8:	00022840 	call	2284 <alt_putstr>
	  if(*readyToTransfer == 1) {
    20ac:	90800003 	ldbu	r2,0(r18)
    20b0:	00c00044 	movi	r3,1
    20b4:	10803fcc 	andi	r2,r2,255
    20b8:	1080201c 	xori	r2,r2,128
    20bc:	10bfe004 	addi	r2,r2,-128
    20c0:	10c0031e 	bne	r2,r3,20d0 <main+0x74>
		  alt_putstr("\n ready to transfer!\n");
    20c4:	01000034 	movhi	r4,0
    20c8:	21098904 	addi	r4,r4,9764
    20cc:	00022840 	call	2284 <alt_putstr>
	  }

  	  input = alt_getchar();
    20d0:	00021340 	call	2134 <alt_getchar>
  	  if(input == 's') {
    20d4:	10803fcc 	andi	r2,r2,255
    20d8:	1080201c 	xori	r2,r2,128
    20dc:	10bfe004 	addi	r2,r2,-128
    20e0:	00c01cc4 	movi	r3,115
    20e4:	10c0091e 	bne	r2,r3,210c <main+0xb0>
  		  *startScanning = 1;
    20e8:	00940c04 	movi	r2,20528
  		  alt_putstr("\n start scanning...\n");
    20ec:	01000034 	movhi	r4,0
		  alt_putstr("\n ready to transfer!\n");
	  }

  	  input = alt_getchar();
  	  if(input == 's') {
  		  *startScanning = 1;
    20f0:	14400005 	stb	r17,0(r2)
  		  alt_putstr("\n start scanning...\n");
    20f4:	21098f04 	addi	r4,r4,9788
    20f8:	00022840 	call	2284 <alt_putstr>
  	  	  usleep(1000000);
    20fc:	010003f4 	movhi	r4,15
    2100:	21109004 	addi	r4,r4,16960
    2104:	00022bc0 	call	22bc <usleep>
    2108:	003fe006 	br	208c <_gp+0xffff79c0>
  	  }
  	  if(input == 't') {
    210c:	00c01d04 	movi	r3,116
    2110:	10ffde1e 	bne	r2,r3,208c <_gp+0xffff79c0>
  		  *xfer = 1;
  		  alt_putstr("\n transferring...\n");
    2114:	01000034 	movhi	r4,0
  		  *startScanning = 1;
  		  alt_putstr("\n start scanning...\n");
  	  	  usleep(1000000);
  	  }
  	  if(input == 't') {
  		  *xfer = 1;
    2118:	84400005 	stb	r17,0(r16)
  		  alt_putstr("\n transferring...\n");
    211c:	21099504 	addi	r4,r4,9812
    2120:	00022840 	call	2284 <alt_putstr>
  	  	  usleep(1000000);
    2124:	010003f4 	movhi	r4,15
    2128:	21109004 	addi	r4,r4,16960
    212c:	00022bc0 	call	22bc <usleep>
    2130:	003fd506 	br	2088 <_gp+0xffff79bc>

00002134 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    2134:	00800034 	movhi	r2,0
    2138:	10899d04 	addi	r2,r2,9844
    213c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    2140:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    2144:	01000034 	movhi	r4,0
    2148:	01800044 	movi	r6,1
    214c:	d80b883a 	mov	r5,sp
    2150:	2109b304 	addi	r4,r4,9932
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    2154:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    2158:	00022e40 	call	22e4 <altera_avalon_jtag_uart_read>
    215c:	0080020e 	bge	zero,r2,2168 <alt_getchar+0x34>
        return -1;
    }
    return c;
    2160:	d8800007 	ldb	r2,0(sp)
    2164:	00000106 	br	216c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    2168:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    216c:	dfc00117 	ldw	ra,4(sp)
    2170:	dec00204 	addi	sp,sp,8
    2174:	f800283a 	ret

00002178 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2178:	deffff04 	addi	sp,sp,-4
    217c:	01000034 	movhi	r4,0
    2180:	01400034 	movhi	r5,0
    2184:	dfc00015 	stw	ra,0(sp)
    2188:	21099d04 	addi	r4,r4,9844
    218c:	2949b904 	addi	r5,r5,9956

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2190:	2140061e 	bne	r4,r5,21ac <alt_load+0x34>
    2194:	01000034 	movhi	r4,0
    2198:	01400034 	movhi	r5,0
    219c:	21080804 	addi	r4,r4,8224
    21a0:	29480804 	addi	r5,r5,8224
    21a4:	2140121e 	bne	r4,r5,21f0 <alt_load+0x78>
    21a8:	00000b06 	br	21d8 <alt_load+0x60>
    21ac:	00c00034 	movhi	r3,0
    21b0:	18c9b904 	addi	r3,r3,9956
    21b4:	1907c83a 	sub	r3,r3,r4
    21b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    21bc:	10fff526 	beq	r2,r3,2194 <_gp+0xffff7ac8>
    {
      *to++ = *from++;
    21c0:	114f883a 	add	r7,r2,r5
    21c4:	39c00017 	ldw	r7,0(r7)
    21c8:	110d883a 	add	r6,r2,r4
    21cc:	10800104 	addi	r2,r2,4
    21d0:	31c00015 	stw	r7,0(r6)
    21d4:	003ff906 	br	21bc <_gp+0xffff7af0>
    21d8:	01000034 	movhi	r4,0
    21dc:	01400034 	movhi	r5,0
    21e0:	21098304 	addi	r4,r4,9740
    21e4:	29498304 	addi	r5,r5,9740

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    21e8:	2140101e 	bne	r4,r5,222c <alt_load+0xb4>
    21ec:	00000b06 	br	221c <alt_load+0xa4>
    21f0:	00c00034 	movhi	r3,0
    21f4:	18c80804 	addi	r3,r3,8224
    21f8:	1907c83a 	sub	r3,r3,r4
    21fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2200:	10fff526 	beq	r2,r3,21d8 <_gp+0xffff7b0c>
    {
      *to++ = *from++;
    2204:	114f883a 	add	r7,r2,r5
    2208:	39c00017 	ldw	r7,0(r7)
    220c:	110d883a 	add	r6,r2,r4
    2210:	10800104 	addi	r2,r2,4
    2214:	31c00015 	stw	r7,0(r6)
    2218:	003ff906 	br	2200 <_gp+0xffff7b34>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    221c:	00023fc0 	call	23fc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2220:	dfc00017 	ldw	ra,0(sp)
    2224:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2228:	00024081 	jmpi	2408 <alt_icache_flush_all>
    222c:	00c00034 	movhi	r3,0
    2230:	18c99d04 	addi	r3,r3,9844
    2234:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2238:	0005883a 	mov	r2,zero
  {
    while( to != end )
    223c:	18bff726 	beq	r3,r2,221c <_gp+0xffff7b50>
    {
      *to++ = *from++;
    2240:	114f883a 	add	r7,r2,r5
    2244:	39c00017 	ldw	r7,0(r7)
    2248:	110d883a 	add	r6,r2,r4
    224c:	10800104 	addi	r2,r2,4
    2250:	31c00015 	stw	r7,0(r6)
    2254:	003ff906 	br	223c <_gp+0xffff7b70>

00002258 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2258:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    225c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2260:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2264:	00022c00 	call	22c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2268:	00022e00 	call	22e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    226c:	d1a02217 	ldw	r6,-32632(gp)
    2270:	d1602317 	ldw	r5,-32628(gp)
    2274:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2278:	dfc00017 	ldw	ra,0(sp)
    227c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2280:	000205c1 	jmpi	205c <main>

00002284 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2284:	defffe04 	addi	sp,sp,-8
    2288:	dc000015 	stw	r16,0(sp)
    228c:	dfc00115 	stw	ra,4(sp)
    2290:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2294:	00024140 	call	2414 <strlen>
    2298:	01000034 	movhi	r4,0
    229c:	000f883a 	mov	r7,zero
    22a0:	100d883a 	mov	r6,r2
    22a4:	800b883a 	mov	r5,r16
    22a8:	2109b304 	addi	r4,r4,9932
#else
    return fputs(str, stdout);
#endif
#endif
}
    22ac:	dfc00117 	ldw	ra,4(sp)
    22b0:	dc000017 	ldw	r16,0(sp)
    22b4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    22b8:	00023401 	jmpi	2340 <altera_avalon_jtag_uart_write>

000022bc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    22bc:	00023741 	jmpi	2374 <alt_busy_sleep>

000022c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    22c0:	deffff04 	addi	sp,sp,-4
    22c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    22c8:	000240c0 	call	240c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    22cc:	00800044 	movi	r2,1
    22d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    22d4:	dfc00017 	ldw	ra,0(sp)
    22d8:	dec00104 	addi	sp,sp,4
    22dc:	f800283a 	ret

000022e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    22e0:	f800283a 	ret

000022e4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    22e4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    22e8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    22ec:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    22f0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    22f4:	11800b2e 	bgeu	r2,r6,2324 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    22f8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    22fc:	1a60000c 	andi	r9,r3,32768
    2300:	48000326 	beq	r9,zero,2310 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    2304:	10c00005 	stb	r3,0(r2)
    2308:	10800044 	addi	r2,r2,1
    230c:	003ff906 	br	22f4 <_gp+0xffff7c28>
    else if (ptr != buffer)
    2310:	11400226 	beq	r2,r5,231c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    2314:	1145c83a 	sub	r2,r2,r5
    2318:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    231c:	403ff526 	beq	r8,zero,22f4 <_gp+0xffff7c28>
    2320:	00000106 	br	2328 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    2324:	117ffb1e 	bne	r2,r5,2314 <_gp+0xffff7c48>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    2328:	39d0000c 	andi	r7,r7,16384
    232c:	3800021e 	bne	r7,zero,2338 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    2330:	00bffec4 	movi	r2,-5
    2334:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    2338:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    233c:	f800283a 	ret

00002340 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2340:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2344:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2348:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    234c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2350:	2980072e 	bgeu	r5,r6,2370 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2354:	38c00037 	ldwio	r3,0(r7)
    2358:	18ffffec 	andhi	r3,r3,65535
    235c:	183ffc26 	beq	r3,zero,2350 <_gp+0xffff7c84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2360:	28c00007 	ldb	r3,0(r5)
    2364:	20c00035 	stwio	r3,0(r4)
    2368:	29400044 	addi	r5,r5,1
    236c:	003ff806 	br	2350 <_gp+0xffff7c84>

  return count;
}
    2370:	f800283a 	ret

00002374 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2374:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2378:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    237c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2380:	dc000015 	stw	r16,0(sp)
    2384:	dfc00115 	stw	ra,4(sp)
    2388:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    238c:	00025280 	call	2528 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2390:	10001026 	beq	r2,zero,23d4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2394:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2398:	013999b4 	movhi	r4,58982
    239c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    23a0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    23a4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    23a8:	297fffc4 	addi	r5,r5,-1
    23ac:	283ffe1e 	bne	r5,zero,23a8 <_gp+0xffff7cdc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    23b0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    23b4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    23b8:	18bffb16 	blt	r3,r2,23a8 <_gp+0xffff7cdc>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    23bc:	01400144 	movi	r5,5
    23c0:	8009883a 	mov	r4,r16
    23c4:	00025e40 	call	25e4 <__mulsi3>
    23c8:	10bfffc4 	addi	r2,r2,-1
    23cc:	103ffe1e 	bne	r2,zero,23c8 <_gp+0xffff7cfc>
    23d0:	00000506 	br	23e8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    23d4:	01400144 	movi	r5,5
    23d8:	8009883a 	mov	r4,r16
    23dc:	00025e40 	call	25e4 <__mulsi3>
    23e0:	10bfffc4 	addi	r2,r2,-1
    23e4:	00bffe16 	blt	zero,r2,23e0 <_gp+0xffff7d14>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    23e8:	0005883a 	mov	r2,zero
    23ec:	dfc00117 	ldw	ra,4(sp)
    23f0:	dc000017 	ldw	r16,0(sp)
    23f4:	dec00204 	addi	sp,sp,8
    23f8:	f800283a 	ret

000023fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    23fc:	f800283a 	ret

00002400 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    2400:	3005883a 	mov	r2,r6
    2404:	f800283a 	ret

00002408 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2408:	f800283a 	ret

0000240c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    240c:	000170fa 	wrctl	ienable,zero
    2410:	f800283a 	ret

00002414 <strlen>:
    2414:	2005883a 	mov	r2,r4
    2418:	10c00007 	ldb	r3,0(r2)
    241c:	18000226 	beq	r3,zero,2428 <strlen+0x14>
    2420:	10800044 	addi	r2,r2,1
    2424:	003ffc06 	br	2418 <_gp+0xffff7d4c>
    2428:	1105c83a 	sub	r2,r2,r4
    242c:	f800283a 	ret

00002430 <__divsi3>:
    2430:	20001b16 	blt	r4,zero,24a0 <__divsi3+0x70>
    2434:	000f883a 	mov	r7,zero
    2438:	28001616 	blt	r5,zero,2494 <__divsi3+0x64>
    243c:	200d883a 	mov	r6,r4
    2440:	29001a2e 	bgeu	r5,r4,24ac <__divsi3+0x7c>
    2444:	00800804 	movi	r2,32
    2448:	00c00044 	movi	r3,1
    244c:	00000106 	br	2454 <__divsi3+0x24>
    2450:	10000d26 	beq	r2,zero,2488 <__divsi3+0x58>
    2454:	294b883a 	add	r5,r5,r5
    2458:	10bfffc4 	addi	r2,r2,-1
    245c:	18c7883a 	add	r3,r3,r3
    2460:	293ffb36 	bltu	r5,r4,2450 <_gp+0xffff7d84>
    2464:	0005883a 	mov	r2,zero
    2468:	18000726 	beq	r3,zero,2488 <__divsi3+0x58>
    246c:	0005883a 	mov	r2,zero
    2470:	31400236 	bltu	r6,r5,247c <__divsi3+0x4c>
    2474:	314dc83a 	sub	r6,r6,r5
    2478:	10c4b03a 	or	r2,r2,r3
    247c:	1806d07a 	srli	r3,r3,1
    2480:	280ad07a 	srli	r5,r5,1
    2484:	183ffa1e 	bne	r3,zero,2470 <_gp+0xffff7da4>
    2488:	38000126 	beq	r7,zero,2490 <__divsi3+0x60>
    248c:	0085c83a 	sub	r2,zero,r2
    2490:	f800283a 	ret
    2494:	014bc83a 	sub	r5,zero,r5
    2498:	39c0005c 	xori	r7,r7,1
    249c:	003fe706 	br	243c <_gp+0xffff7d70>
    24a0:	0109c83a 	sub	r4,zero,r4
    24a4:	01c00044 	movi	r7,1
    24a8:	003fe306 	br	2438 <_gp+0xffff7d6c>
    24ac:	00c00044 	movi	r3,1
    24b0:	003fee06 	br	246c <_gp+0xffff7da0>

000024b4 <__modsi3>:
    24b4:	20001716 	blt	r4,zero,2514 <__modsi3+0x60>
    24b8:	000f883a 	mov	r7,zero
    24bc:	2005883a 	mov	r2,r4
    24c0:	28001216 	blt	r5,zero,250c <__modsi3+0x58>
    24c4:	2900162e 	bgeu	r5,r4,2520 <__modsi3+0x6c>
    24c8:	01800804 	movi	r6,32
    24cc:	00c00044 	movi	r3,1
    24d0:	00000106 	br	24d8 <__modsi3+0x24>
    24d4:	30000a26 	beq	r6,zero,2500 <__modsi3+0x4c>
    24d8:	294b883a 	add	r5,r5,r5
    24dc:	31bfffc4 	addi	r6,r6,-1
    24e0:	18c7883a 	add	r3,r3,r3
    24e4:	293ffb36 	bltu	r5,r4,24d4 <_gp+0xffff7e08>
    24e8:	18000526 	beq	r3,zero,2500 <__modsi3+0x4c>
    24ec:	1806d07a 	srli	r3,r3,1
    24f0:	11400136 	bltu	r2,r5,24f8 <__modsi3+0x44>
    24f4:	1145c83a 	sub	r2,r2,r5
    24f8:	280ad07a 	srli	r5,r5,1
    24fc:	183ffb1e 	bne	r3,zero,24ec <_gp+0xffff7e20>
    2500:	38000126 	beq	r7,zero,2508 <__modsi3+0x54>
    2504:	0085c83a 	sub	r2,zero,r2
    2508:	f800283a 	ret
    250c:	014bc83a 	sub	r5,zero,r5
    2510:	003fec06 	br	24c4 <_gp+0xffff7df8>
    2514:	0109c83a 	sub	r4,zero,r4
    2518:	01c00044 	movi	r7,1
    251c:	003fe706 	br	24bc <_gp+0xffff7df0>
    2520:	00c00044 	movi	r3,1
    2524:	003ff106 	br	24ec <_gp+0xffff7e20>

00002528 <__udivsi3>:
    2528:	200d883a 	mov	r6,r4
    252c:	2900152e 	bgeu	r5,r4,2584 <__udivsi3+0x5c>
    2530:	28001416 	blt	r5,zero,2584 <__udivsi3+0x5c>
    2534:	00800804 	movi	r2,32
    2538:	00c00044 	movi	r3,1
    253c:	00000206 	br	2548 <__udivsi3+0x20>
    2540:	10000e26 	beq	r2,zero,257c <__udivsi3+0x54>
    2544:	28000516 	blt	r5,zero,255c <__udivsi3+0x34>
    2548:	294b883a 	add	r5,r5,r5
    254c:	10bfffc4 	addi	r2,r2,-1
    2550:	18c7883a 	add	r3,r3,r3
    2554:	293ffa36 	bltu	r5,r4,2540 <_gp+0xffff7e74>
    2558:	18000826 	beq	r3,zero,257c <__udivsi3+0x54>
    255c:	0005883a 	mov	r2,zero
    2560:	31400236 	bltu	r6,r5,256c <__udivsi3+0x44>
    2564:	314dc83a 	sub	r6,r6,r5
    2568:	10c4b03a 	or	r2,r2,r3
    256c:	1806d07a 	srli	r3,r3,1
    2570:	280ad07a 	srli	r5,r5,1
    2574:	183ffa1e 	bne	r3,zero,2560 <_gp+0xffff7e94>
    2578:	f800283a 	ret
    257c:	0005883a 	mov	r2,zero
    2580:	f800283a 	ret
    2584:	00c00044 	movi	r3,1
    2588:	003ff406 	br	255c <_gp+0xffff7e90>

0000258c <__umodsi3>:
    258c:	2005883a 	mov	r2,r4
    2590:	2900122e 	bgeu	r5,r4,25dc <__umodsi3+0x50>
    2594:	28001116 	blt	r5,zero,25dc <__umodsi3+0x50>
    2598:	01800804 	movi	r6,32
    259c:	00c00044 	movi	r3,1
    25a0:	00000206 	br	25ac <__umodsi3+0x20>
    25a4:	30000c26 	beq	r6,zero,25d8 <__umodsi3+0x4c>
    25a8:	28000516 	blt	r5,zero,25c0 <__umodsi3+0x34>
    25ac:	294b883a 	add	r5,r5,r5
    25b0:	31bfffc4 	addi	r6,r6,-1
    25b4:	18c7883a 	add	r3,r3,r3
    25b8:	293ffa36 	bltu	r5,r4,25a4 <_gp+0xffff7ed8>
    25bc:	18000626 	beq	r3,zero,25d8 <__umodsi3+0x4c>
    25c0:	1806d07a 	srli	r3,r3,1
    25c4:	11400136 	bltu	r2,r5,25cc <__umodsi3+0x40>
    25c8:	1145c83a 	sub	r2,r2,r5
    25cc:	280ad07a 	srli	r5,r5,1
    25d0:	183ffb1e 	bne	r3,zero,25c0 <_gp+0xffff7ef4>
    25d4:	f800283a 	ret
    25d8:	f800283a 	ret
    25dc:	00c00044 	movi	r3,1
    25e0:	003ff706 	br	25c0 <_gp+0xffff7ef4>

000025e4 <__mulsi3>:
    25e4:	0005883a 	mov	r2,zero
    25e8:	20000726 	beq	r4,zero,2608 <__mulsi3+0x24>
    25ec:	20c0004c 	andi	r3,r4,1
    25f0:	2008d07a 	srli	r4,r4,1
    25f4:	18000126 	beq	r3,zero,25fc <__mulsi3+0x18>
    25f8:	1145883a 	add	r2,r2,r5
    25fc:	294b883a 	add	r5,r5,r5
    2600:	203ffa1e 	bne	r4,zero,25ec <_gp+0xffff7f20>
    2604:	f800283a 	ret
    2608:	f800283a 	ret

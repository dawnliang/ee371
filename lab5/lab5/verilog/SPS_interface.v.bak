`include "clock_divider.v"
`include "psOut.v"
`include "spIn.v"
module SPS_interface(LED, SW, dataOut, dataIn, clk, rst);
	input clk, rst;			// 50MHz clock & KEY0 rst
	// 10-bit data frames packaged as {start, 8-bit data, stop}
	input dataIn;			// serial input stream
	output dataOut;			// serial output stream

	input SW;				// which parallel data bus to monitor
	output [9:0] LED;		// led monitoring of parallel data bus

	// to get 16x data rate clock (= 153600 Hz), use clock 8: 195312.5 Hz
	wire [31:0] divided_clocks;
	wire final_clock;
	clock_divider cdiv (.clk(clk), .divided_clocks(divided_clocks));
	assign final_clock = divided_clocks[8];

	// data lines
	wire sDataIn, sDataOut;
	wire [7:0] pDataIn, pDataOut;
	wire charReceived, charSent;	// input ctrl signals to nios

	// buffers between boards - acts as a diode
	buf bufin (dataIn, sDataIn);
	buf bufout (sDataOut, dataOut);

	// NIOS II & SPS interface
	spIn niosIn (.parallelOut(pDataOut), .charReceived(charReceived), .serialIn(sDataIn), .clk(final_clock), .rst(rst));
	psOut niosOut (serialOut, charSent, parallelIn, load, transmitEnable, clk, rst);

	// nios2 nios (.pDataOut(pDataOut), .transmitEnable(transmitEnable), .load(load), .pDataIn(pDataIn), .charReceived(charReceived), charSent(charSent));

	// display parallel data bus on LEDs
	reg data_display;
	initial data_display = 10'b0;

	always@(*) begin
		if (SW == 1) data_display = pDataIn;	// SW on = show input data
		else data_display = pDataOut;			// SW off = show output data
	end

	assign LED = data_display;
endmodule

// testbench for SPS_interface module
module SPS_interface_testbench();
	reg clk, rst;
	reg SW, dataIn;
	wire dataOut;
	wire [9:0] LED;

	// set up clock
	parameter PERIOD = 10;
	initial clk = 0;
	always begin
		#(PERIOD/2);
		clk = ~clk;
	end

	// device under test
	SPS_interface dut (.LED(LED), .SW(SW), .dataOut(dataOut), .dataIn(dataIn), .clk(clk), .rst(rst));

	// begin simulation
	initial begin
		rst <= 1;						@(posedge clk);
		rst <= 0; SW <= 0; dataIn <= 0;	@(posedge clk);
										@(posedge clk);
										@(posedge clk);
		$finish;
	end

	// gtkwave filedump
	initial begin
		$dumpfile("SPS_interface.vcd");
		$dumpvars;
	end
endmodule
$date
	Fri Nov 11 16:12:42 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module counterCtrl_testbench $end
$var wire 4 ! val [3:0] $end
$var wire 1 " up $end
$var wire 1 # final_clock $end
$var wire 1 $ down $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$var reg 3 ' state [2:0] $end
$scope module dut $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 3 ( state [2:0] $end
$var wire 4 ) val [3:0] $end
$var wire 32 * divided_clocks [31:0] $end
$var reg 1 $ down $end
$var reg 1 # final_clock $end
$var reg 1 " up $end
$scope module div $end
$var wire 1 % clk $end
$var wire 32 + divided_clocks [31:0] $end
$var reg 32 , clocks [31:0] $end
$upscope $end
$scope module prog $end
$var wire 1 # clk $end
$var wire 1 $ down $end
$var wire 1 & reset $end
$var wire 1 " up $end
$var wire 4 - val [3:0] $end
$var reg 4 . ns [3:0] $end
$var reg 4 / ps [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx /
bx .
bx -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
1&
0%
0$
0#
0"
bx !
$end
#5
b0 .
b0 !
b0 )
b0 -
b0 /
1#
b1 *
b1 +
b1 ,
1%
#10
0%
#15
0#
b10 *
b10 +
b10 ,
1%
#20
0%
#25
1#
b11 *
b11 +
b11 ,
b0 '
b0 (
0&
1%
#30
0%
#35
0#
b100 *
b100 +
b100 ,
1%
#40
0%
#45
1#
b101 *
b101 +
b101 ,
1%
#50
0%
#55
0#
b1 '
b1 (
b110 *
b110 +
b110 ,
1%
#60
0%
#65
1#
b111 *
b111 +
b111 ,
1%
#70
0%
#75
0#
b1000 *
b1000 +
b1000 ,
1%
#80
0%
#85
b1 .
1"
b1001 *
b1001 +
b1001 ,
b10 '
b10 (
1%
#90
0%
#95
b1010 *
b1010 +
b1010 ,
1%
#100
0%
#105
b1011 *
b1011 +
b1011 ,
1%
#110
0%
#115
b10 .
b1 !
b1 )
b1 -
b1 /
1#
b1100 *
b1100 +
b1100 ,
1%
#120
0%
#125
b1101 *
b1101 +
b1101 ,
1%
#130
0%
#135
b1110 *
b1110 +
b1110 ,
1%
#140
0%
#145
b1111 *
b1111 +
b1111 ,
1%
#150
0%
#155
0#
b10000 *
b10000 +
b10000 ,
1%
#160
0%
#165
b10001 *
b10001 +
b10001 ,
1%
#170
0%
#175
b10010 *
b10010 +
b10010 ,
1%
#180
0%
#185
b10 !
b10 )
b10 -
b10 /
b10 .
0"
1#
b10011 *
b10011 +
b10011 ,
b11 '
b11 (
1%
#190
0%
#195
0#
b10100 *
b10100 +
b10100 ,
1%
#200
0%
#205
1#
b10101 *
b10101 +
b10101 ,
1%
#210
0%
#215
b1 .
1$
b100 '
b100 (
b10110 *
b10110 +
b10110 ,
1%
#220
0%
#225
b10111 *
b10111 +
b10111 ,
1%
#230
0%
#235
0#
b11000 *
b11000 +
b11000 ,
1%
#240
0%
#245
b11001 *
b11001 +
b11001 ,
1%
#250
0%
#255
b0 .
b1 !
b1 )
b1 -
b1 /
1#
b11010 *
b11010 +
b11010 ,
1%
#260
0%
#265
b11011 *
b11011 +
b11011 ,
1%
#270
0%
#275
0#
b101 '
b101 (
b11100 *
b11100 +
b11100 ,
1%
#280
0%
#285
b0 !
b0 )
b0 -
b0 /
1#
b11101 *
b11101 +
b11101 ,
1%
#290
0%
#295
0#
b11110 *
b11110 +
b11110 ,
1%
#300
0%
#305
1#
b11111 *
b11111 +
b11111 ,
1%
#310
0%
#315
0#
b100000 *
b100000 +
b100000 ,
1%
#320
0%
#325
1#
b100001 *
b100001 +
b100001 ,
1%
#330
0%
#335
0#
b100010 *
b100010 +
b100010 ,
1%
#340
0%
#345
1#
b100011 *
b100011 +
b100011 ,
1%
